// Generated by CoffeeScript 1.6.3
(function() {
  describe("Raffler", function() {
    var test;
    test = {};
    it("should be defined", function() {
      return expect(Raffler).toBeDefined();
    });
    describe("Raffler Routers Entries", function() {
      return it("should be defined", function() {
        return expect(Raffler.Routers.Entries).toBeDefined();
      });
    });
    describe("Raffler Views EntriesIndex", function() {
      test.collection_data = [
        {
          id: 1,
          name: 'Tony',
          winner: false
        }, {
          id: 2,
          name: 'Steve',
          winner: false
        }, {
          id: 3,
          name: 'Mike',
          winner: false
        }, {
          id: 4,
          name: 'Moe',
          winner: false
        }
      ];
      test.element = document.createElement('div');
      beforeEach(function() {
        test.collection = new Raffler.Collections.Entries(test.collection_data);
        test.view = new Raffler.Views.EntriesIndex({
          collection: test.collection,
          el: test.element
        });
        return test.view.render;
      });
      it("should be defined", function() {
        return expect(Raffler.Views.EntriesIndex).toBeDefined();
      });
      it("should use the specified element", function() {
        return expect(test.view.el).toEqual(test.element);
      });
      it("should use the specified collection", function() {
        return expect(test.view.collection).toEqual(test.collection);
      });
      it("should render collection items into the UL element in its template", function() {
        test.view.render();
        return expect($(test.element).find('li').length).toEqual(4);
      });
      it("should render when an element is added to the collection", function() {
        test.collection.add({
          id: 5,
          name: 'Larry',
          winner: false
        });
        return expect($(test.element).find('li').length).toEqual(5);
      });
      it("should render when an element is destroyed", function() {
        var entry;
        entry = test.collection.get(1);
        entry.destroy();
        return expect($(test.element).find('li').length).toEqual(3);
      });
      return it("should destroy an entry when its li element is clicked", function() {
        var before_length, li, removed_entry;
        li = $(test.element).find('li')[2];
        removed_entry = test.collection.get(li.id);
        before_length = test.collection.length;
        $(li).trigger('click');
        expect(test.collection.length).toEqual(before_length - 1);
        return expect(test.collection.models).not.toContain(removed_entry);
      });
    });
    describe("Raffler Model Entry", function() {
      it("should be defined", function() {
        return expect(Raffler.Models.Entry).toBeDefined();
      });
      return describe("Validations", function() {
        var attrs;
        attrs = {};
        beforeEach(function() {
          return attrs = {
            name: 'Tony',
            winner: false
          };
        });
        afterEach(function() {
          test.raffler = new Raffler.Models.Entry(attrs);
          return expect(test.raffler.isValid()).toBeFalsy();
        });
        it("should validate that name is a string", function() {
          return attrs['name'] = ['array'];
        });
        return it("should validate the presence of name", function() {
          return attrs['name'] = '';
        });
      });
    });
    return describe("Raffler Collections Entries", function() {
      it("should be defined", function() {
        return expect(Raffler.Collections.Entries).toBeDefined();
      });
      return it("should use the Raffler.Models.Entry model", function() {
        test.entries = new Raffler.Collections.Entries;
        return expect(test.entries.model).toEqual(Raffler.Models.Entry);
      });
    });
  });

}).call(this);
